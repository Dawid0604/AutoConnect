name: "Infrastructure"

volumes:
  user-service-postgres-volume:
  notification-service-postgres-volume:

services:
  user-service-postgres-db:
    image: postgres:17-alpine
    container_name: user-service-postgres-db

    environment:
      - POSTGRES_USER=${USER_MICROSERVICE_POSTGRES_USER}
      - POSTGRES_PASSWORD=${USER_MICROSERVICE_POSTGRES_PASSWORD}
      - POSTGRES_DB=${USER_MICROSERVICE_POSTGRES_DB}
      - PGPORT=${USER_MICROSERVICE_POSTGRES_PORT}

    command: "-p ${USER_MICROSERVICE_POSTGRES_PORT}"

    ports:
      - "${USER_MICROSERVICE_POSTGRES_PORT}:${USER_MICROSERVICE_POSTGRES_PORT}"

    volumes:
      - user-service-postgres-volume:/var/lib/postgresql/data

    healthcheck:
      test: >
        bash -c "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB} && 
                 psql -U $${POSTGRES_USER} -d $${POSTGRES_DB} -c 'SELECT 1'"
      interval: 10s
      timeout: 5s
      retries: 5

    networks:
      - autoconnect_network

  notification-service-postgres-db:
    image: postgres:17-alpine
    container_name: notification-service-postgres-db

    environment:
      - POSTGRES_USER=${NOTIFICATION_MICROSERVICE_POSTGRES_USER}
      - POSTGRES_PASSWORD=${NOTIFICATION_MICROSERVICE_POSTGRES_PASSWORD}
      - POSTGRES_DB=${NOTIFICATION_MICROSERVICE_POSTGRES_DB}
      - PGPORT=${NOTIFICATION_MICROSERVICE_POSTGRES_PORT}

    command: "-p ${NOTIFICATION_MICROSERVICE_POSTGRES_PORT}"

    ports:
      - "${NOTIFICATION_MICROSERVICE_POSTGRES_PORT}:${NOTIFICATION_MICROSERVICE_POSTGRES_PORT}"

    volumes:
      - notification-service-postgres-volume:/var/lib/postgresql/data

    healthcheck:
      test: >
        bash -c "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB} && 
                 psql -U $${POSTGRES_USER} -d $${POSTGRES_DB} -c 'SELECT 1'"
      interval: 10s
      timeout: 5s
      retries: 5

    networks:
      - autoconnect_network

  zookeeper:
    image: zookeeper:3.9.3-jre-17
    container_name: zookeeper
    healthcheck:
      test: [ "CMD", "nc", "-z", "localhost", "2181" ]
      interval: 10s
      timeout: 5s
      retries: 5

    ports:
      - "22181:2181"

    networks:
      - autoconnect_network

  kafka:
    image: confluentinc/cp-kafka:7.9.1
    container_name: kafka
    depends_on:
      zookeeper:
        condition: service_healthy

    healthcheck:
      test: [ "CMD", "nc", "-z", "localhost", "9092" ]
      interval: 10s
      timeout: 5s
      retries: 10

    ports:
      - "9092:29092"

    environment:
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
      - KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR=1
      - KAFKA_TRANSACTION_STATE_LOG_MIN_ISR=1
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:29092,PLAINTEXT_HOST://host.docker.internal:9092
      - KAFKA_LISTENERS=PLAINTEXT://0.0.0.0:29092,PLAINTEXT_HOST://0.0.0.0:9092

    networks:
      - autoconnect_network

networks:
  autoconnect_network:
    driver: bridge
    name: autoconnect_network
